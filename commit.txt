feat: 점주 기능 구현 완료 및 관리자 기능 준비

이번 커밋은 점주(Owner) 역할에 필요한 모든 기능을 구현하고, 다음 단계인 관리자(Admin) 기능 구현을 위한 준비를 마쳤습니다.

## 진행 상황 기록 (process.txt)

**[완료] 6. 고객 기능 구현**

- **세부 항목:** `6.1 편의점 목록 및 상세 페이지`
- **작업 내용:**
    1. **편의점 목록 조회 기능 구현 (API 연동)**
        - `CVS/src/pages/customer/` 디렉토리를 생성했습니다.
        - `StoreListPage.tsx` 컴포넌트를 새로 생성하여, `DatabaseService.findAll('stores')`를 통해 Supabase에서 실제 편의점 목록 데이터를 조회하는 기능을 구현했습니다.
        - 데이터 로딩, 성공, 실패 상태에 따라 UI가 적절히 표시되도록 처리했습니다.

    2. **고객 라우팅 수정**
        - `router.tsx` 파일을 수정하여, `/customer/*` 경로 접근 시 임시 플레이스홀더 대신 새로 만든 `StoreListPage` 컴포넌트를 렌더링하도록 변경했습니다.
        - 이제 고객 역할 사용자는 로그인 후 실제 데이터가 연동된 편의점 목록 페이지를 볼 수 있습니다.

    3. **편의점 상세 페이지 구현**
        - `StoreDetailPage.tsx` 컴포넌트를 새로 생성하여, URL 파라미터로 받은 `id`를 이용해 `DatabaseService.findById('stores', id)`를 호출, 특정 편의점의 상세 정보를 조회하는 기능을 구현했습니다.
        - `StoreListPage.tsx`의 각 목록 아이템에 `Link`를 추가하여, 클릭 시 해당 편의점의 상세 페이지로 이동하도록 수정했습니다.
        - `router.tsx`에 `/customer/stores/:id` 동적 경로를 추가하여 `StoreDetailPage`가 렌더링되도록 설정했습니다.

- **세부 항목:** `6.2 상품 검색 및 필터링`
- **작업 내용:**
    1. **상품 목록 조회 기능 구현**
        - `database.ts`에 `getProductsByStore` 함수를 추가하여, 특정 가게의 재고와 상품 정보를 함께 조회하는 기능을 구현했습니다.
        - `StoreDetailPage.tsx`에서 `getProductsByStore` 함수를 호출하여, 해당 편의점에서 판매하는 상품 목록과 재고를 화면에 표시하도록 수정했습니다.

    2. **상품 검색 및 필터링 기능 구현**
        - `components/common/SearchBar.tsx` 공용 검색창 컴포넌트를 생성했습니다.
        - `components/customer/ProductFilter.tsx` 고객용 상품 카테고리 필터 컴포넌트를 생성했습니다.
        - `StoreDetailPage.tsx`에 위 두 컴포넌트를 추가하고, 검색어와 선택된 카테고리에 따라 상품 목록을 클라이언트 사이드에서 필터링하는 로직을 구현했습니다.

- **세부 항목:** `6.3 장바구니 시스템`
- **작업 내용:**
    1. **장바구니 Context 및 Provider 생성**
        - `context/CartContext.tsx` 파일을 생성하여, 장바구니 상태(추가, 삭제, 수량 변경)를 전역적으로 관리하는 `CartProvider`와 `useCart` 훅을 구현했습니다.
        - 장바구니 내용은 `localStorage`에 저장하여 새로고침해도 유지되도록 구현했습니다.
        - `App.tsx`에 `CartProvider`를 적용했습니다.

    2. **UI 연동**
        - `StoreDetailPage.tsx`의 각 상품 카드에 '장바구니에 담기' 버튼을 추가하고, `useCart` 훅의 `addToCart` 함수와 연동했습니다.
        - `components/common/Header.tsx`에 장바구니 아이콘과 상품 개수를 표시하고, 클릭 시 장바구니 페이지로 이동하는 링크를 추가했습니다.

    3. **장바구니 페이지 구현**
        - `pages/customer/CartPage.tsx` 컴포넌트를 생성하여, 장바구니에 담긴 상품 목록, 수량, 총액을 표시하고 관리하는 UI를 구현했습니다.
        - `router.tsx`에 `/customer/cart` 경로를 추가하여 `CartPage` 컴포넌트를 연결했습니다.

- **세부 항목:** `6.4 쿠폰 시스템`
- **작업 내용:**
    1. **쿠폰 조회 기능 구현**
        - `database.ts`에 `getAvailableCoupons` 함수를 추가하여, 유효한 쿠폰 목록을 조회하는 기능을 구현했습니다.
    2. **쿠폰 선택 UI 및 로직 구현**
        - `components/customer/CouponSelector.tsx` 컴포넌트를 생성하여 사용 가능한 쿠폰을 선택하는 UI를 구현했습니다.
        - `CartPage.tsx`에 `CouponSelector`를 통합하고, 선택된 쿠폰에 따라 할인 금액을 계산하여 최종 결제 금액에 반영하는 로직을 추가했습니다.
        - `createOrder` 함수 호출 시 할인 금액과 최종 결제 금액을 함께 전달하도록 `CartPage.tsx`를 수정했습니다.

- **세부 항목:** `6.5 주문 및 결제 시스템`
- **작업 내용:**
    1. **주문 생성 기능 구현 (DB 함수)**
        - `supabase/migrations/005_create_order_function.sql` 파일을 생성하여, `orders`와 `order_items` 테이블에 원자적으로 데이터를 추가하는 `create_order` SQL 함수를 정의했습니다.
        - `services/database.ts`에 `createOrder` 메서드를 추가하여, Supabase RPC를 통해 `create_order` 함수를 호출하도록 구현했습니다.
        - `CartPage.tsx`의 '결제하기' 버튼에 `createOrder` 함수를 연동하여, 장바구니 상품을 기반으로 실제 주문을 생성하는 기능을 구현했습니다.

    2. **Toss Payments 연동 및 결제 결과 처리**
        - `@tosspayments/payment-sdk` 라이브러리를 설치했습니다.
        - `services/payment.ts` 파일을 생성하여 Toss Payments SDK 로드, 결제 요청(`requestPayment`), 결제 성공(`savePaymentSuccess`), 결제 실패(`savePaymentFailure`) 로직을 구현했습니다.
        - `CartPage.tsx`의 '결제하기' 버튼 클릭 시, 주문 생성 후 `PaymentService.requestPayment`를 호출하여 Toss Payments 결제창을 띄우도록 연동했습니다.
        - `pages/customer/OrderSuccessPage.tsx` 컴포넌트를 생성하여 결제 성공 시 Supabase에 결제 정보를 저장하고 주문 상태를 업데이트하는 로직을 구현했습니다.
        - `pages/customer/OrderFailPage.tsx` 컴포넌트를 생성하여 결제 실패 시 Supabase에 실패 정보를 저장하는 로직을 구현했습니다.
        - `router.tsx`에 `/customer/order-success`와 `/customer/order-fail` 경로를 추가하여 각각의 페이지를 연결했습니다.

    3. **장바구니 `store_id` 처리 개선**
        - `context/CartContext.tsx`의 `Product` 인터페이스에 `store_id` 필드를 추가했습니다.
        - `StoreDetailPage.tsx`에서 상품을 장바구니에 추가할 때 `store_id`를 함께 전달하도록 `addToCart` 호출 부분을 수정했습니다.

- **세부 항목:** `6.6 주문 내역 및 프로필 관리`
- **작업 내용:**
    1. **주문 내역 조회 기능 구현**
        - `database.ts`에 `getOrdersByCustomerId` 함수를 추가하여, 특정 고객의 주문 목록과 상세 주문 상품 정보를 조회하는 기능을 구현했습니다.
        - `pages/customer/OrdersPage.tsx` 컴포넌트를 생성하여 고객의 주문 내역을 표시하는 UI를 구현했습니다.
        - `router.tsx`에 `/customer/orders` 경로를 추가하여 `OrdersPage` 컴포넌트를 연결했습니다.

    2. **프로필 관리 기능 구현**
        - `pages/customer/ProfilePage.tsx` 컴포넌트를 생성했습니다.
        - `database.ts`에 `getProfile` 및 `updateProfile` 함수를 추가했습니다.
        - `ProfilePage.tsx`에서 사용자 이메일, 이름, 연락처를 표시하고 수정하는 기능을 구현했습니다.
        - `profiles` 테이블의 도메인에 맞춰 사용자 이름 필드를 `username`에서 `name`으로 변경했습니다.
        - `router.tsx`에 `/customer/profile` 경로를 추가하여 `ProfilePage` 컴포넌트를 연결했습니다.

**[완료] 7. 점주 기능 구현**

- **세부 항목:** `7.1 점주 대시보드`
- **작업 내용:**
    1. **점주 대시보드 페이지 및 라우팅 설정**
        - `CVS/src/pages/owner/OwnerDashboardPage.tsx` 파일을 생성하고 기본 구조를 구현했습니다.
        - `CVS/src/router.tsx` 파일을 수정하여 `/owner` 경로에 `OwnerDashboardPage`를 연결했습니다.
    2. **대시보드 데이터 연동 및 KPI 표시**
        - `CVS/src/services/database.ts`에 `getStoreByOwnerId` 및 `getOrdersByStoreId` 함수를 추가했습니다.
        - `OwnerDashboardPage.tsx`에서 로그인한 점주의 편의점 정보와 주문 데이터를 가져와 총 주문 건수, 총 매출, 오늘의 매출, 주문 상태별 건수 등의 KPI를 표시하도록 구현했습니다.

- **세부 항목:** `7.2 주문 관리 시스템`
- **작업 내용:**
    1. **주문 관리 페이지 및 라우팅 설정**
        - `CVS/src/pages/owner/OrderManagementPage.tsx` 파일을 생성하고 기본 구조를 구현했습니다.
        - `CVS/src/router.tsx` 파일을 수정하여 `/owner/orders` 경로에 `OrderManagementPage`를 연결했습니다.
    2. **주문 목록 표시 및 상태 변경 기능 구현**
        - `OrderManagementPage.tsx`에서 `getOrdersByStoreId` 함수를 사용하여 주문 데이터를 가져와 표시했습니다.
        - 주문 상태를 변경하는 버튼과 모달을 통해 주문 상세 정보를 확인할 수 있도록 구현했습니다.

- **세부 항목:** `7.3 상품 및 재고 관리`
- **작업 내용:**
    1. **상품 및 재고 관리 페이지 및 라우팅 설정**
        - `CVS/src/pages/owner/ProductInventoryManagementPage.tsx` 파일을 생성하고 기본 구조를 구현했습니다.
        - `CVS/src/router.tsx` 파일을 수정하여 `/owner/products` 경로에 `ProductInventoryManagementPage`를 연결했습니다.
    2. **상품 및 재고 관리 기능 구현**
        - `ProductInventoryManagementPage.tsx`에서 `getProductsByStore` 함수를 사용하여 상품 및 재고 데이터를 가져와 표시했습니다.
        - 새 상품 추가, 기존 상품 및 재고 수정/삭제 기능을 위한 모달 폼을 구현했습니다.

- **세부 항목:** `7.4 발주 요청 시스템`
- **작업 내용:**
    1. **발주 요청 관리 페이지 및 라우팅 설정**
        - `CVS/src/pages/owner/PurchaseRequestManagementPage.tsx` 파일을 생성하고 기본 구조를 구현했습니다.
        - `CVS/src/router.tsx` 파일을 수정하여 `/owner/purchase-requests` 경로에 `PurchaseRequestManagementPage`를 연결했습니다.
    2. **발주 요청 관리 기능 구현**
        - `CVS/src/services/database.ts`에 `getPurchaseRequestsByStoreId`, `createPurchaseRequest`, `updatePurchaseRequest`, `deletePurchaseRequest` 함수를 추가했습니다.
        - `PurchaseRequestManagementPage.tsx`에서 발주 요청 목록 표시, 생성, 수정, 삭제 기능을 구현했습니다.
        - `CVS/src/components/common/Sidebar.tsx`에 "발주 요청 관리" 메뉴를 추가했습니다.

- **세부 항목:** `7.5 매출 분석`
- **작업 내용:**
    1. **매출 분석 페이지 및 라우팅 설정**
        - `CVS/src/pages/owner/SalesAnalysisPage.tsx` 파일을 생성하고 기본 구조를 구현했습니다.
        - `CVS/src/router.tsx` 파일을 수정하여 `/owner/analytics` 경로에 `SalesAnalysisPage`를 연결했습니다.
    2. **매출 차트 및 통계 구현**
        - `react-chartjs-2` 및 `chart.js` 라이브러리를 설치했습니다.
        - `SalesAnalysisPage.tsx`에서 `getOrdersByStoreId` 함수를 사용하여 주문 데이터를 가져와 일별/주별/월별 매출 차트 및 통계를 표시하도록 구현했습니다.
        - 페이지 제목에 `storeId` 대신 편의점 이름을 표시하도록 수정했습니다.

- **세부 항목:** `7.6 쿠폰 관리`
- **작업 내용:**
    1. **쿠폰 관리 페이지 및 라우팅 설정**
        - `CVS/src/pages/owner/CouponManagementPage.tsx` 파일을 생성하고 기본 구조를 구현했습니다.
        - `CVS/src/router.tsx` 파일을 수정하여 `/owner/coupons` 경로에 `CouponManagementPage`를 연결했습니다.
    2. **쿠폰 관리 기능 구현**
        - `CVS/src/services/database.ts`에 `createCoupon`, `updateCoupon`, `deleteCoupon` 함수를 추가했습니다.
        - `CouponManagementPage.tsx`에서 쿠폰 목록 표시, 생성, 수정, 삭제 기능을 구현했습니다.
        - 페이지 제목에 `storeId` 대신 편의점 이름을 표시하도록 수정했습니다.

## 깨달음 및 교훈

- **명확한 의사소통의 중요성:** 작업 지시와 결과 확인 과정에서 발생한 혼동은 명확한 의사소통과 상호 확인의 중요성을 다시 한번 일깨워주었습니다. 특히, 여러 파일에 걸쳐 유사한 수정이 이루어질 때 더욱 주의해야 합니다.
- **데이터베이스 상태 관리의 중요성:** 개발/테스트 환경에서 `owner` 계정에 연결된 `store` 데이터가 없어 발생한 오류는 데이터베이스의 초기 상태 및 테스트 데이터 관리가 얼마나 중요한지 보여주었습니다. 실제 환경에서는 이러한 데이터 불일치가 심각한 문제로 이어질 수 있습니다.
- **점진적 개발의 효율성:** 각 기능을 페이지 생성, 라우팅 설정, 데이터 연동, UI 구현 순서로 점진적으로 개발하는 방식은 복잡한 기능을 체계적으로 구현하고 디버깅하는 데 효과적이었습니다.


## 다음 작업 예정: 관리자 기능 구현

- **8. 관리자 기능 구현:**
    - **8.1 관리자 대시보드:** 전체 KPI 대시보드 (매출, 주문 수, 점포 수 등) 구현
    - **8.2 사용자 관리:** 사용자 계정 관리 기능 (계정 상태 변경, 권한 조정) 구현
    - **8.3 편의점 승인 및 관리:** 편의점 등록 승인/거절 기능, 편의점 정보 관리 구현
    - **8.4 공지사항 및 설정 관리:** 공지사항 작성 및 관리, 시스템 설정값 관리 구현

- **9. 실시간 알림 시스템 구현:** NotificationContext 및 useNotifications 훅 구현, Supabase Realtime을 통한 실시간 알림, Toast 알림 시스템 구현, notifications 테이블 활용

- **10. 테스트 계정 및 샘플 데이터 구성:** 개발/테스트용 계정 생성, 샘플 점포, 상품, 주문 데이터 생성

- **11. 기본 테스트 구현:** 주요 컴포넌트 단위 테스트 작성 (Vitest + Testing Library), 인증 시스템 테스트, API 서비스 테스트

- **12. 배포 설정:** 환경 변수 설정 및 관리, Render 배포 설정, 프로덕션 빌드 최적화